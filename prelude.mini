# minilang standard library (and experiments)

# FOREACH takes a function of one argument
foreach := lambda(lst, f)
            if lst != nil {
              f(car(lst)).
              foreach(cdr(lst), f)
            }.

# repeat takes a function of no parameters
repeat := [|times, fn| foreach(range(1, times), [|_| fn()])].

# a tail recursive version of range that is TCO'ed by SBCL
# the inner lambda is immediately executed to produce the actual function
range := lambda(a, b)
           (lambda range% (a, b, acc)
             if a <= b
               then range%((a + 1) , b , cons(a, acc))
               else reverse(acc)) (a, b, nil).

range% := lambda(a, b, step)
            (lambda range% (a, b, step, acc)
              if a <= b
                then range%(a + step, b, step, cons(a, acc))
                else reverse(acc)) (a, b, step, nil).


# a generator version of range

irange := lambda (a, b)
  let (n = a - 1)
    lambda()
      if n < b then n := n + 1 .


# we don't need to reify characters to use them
# here an example naive implementation of ROT13 to demonstrate it
# please feed it only strings made of uppercase characters

import("code-char").
import("char-code").

rot13-one% := lambda(c, base-char)
               code-char((((char-code(c) - base-char) + 13) % 26) + base-char).

rot13-one := lambda(c)
               let (n = char-code(c))
                 if n >= 97 && n <= 122
                   then rot13-one%(c, 97)
                   else if n >= 65 && n <= 90
                     then rot13-one%(c, 65)
                   else c.

rot13 := lambda(str) maps(rot13-one, str).


# block syntax example
make-counter := [let (a = 0) [a := a + 1 . a - 1]].
