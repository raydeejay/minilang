# minilang standard library

foreach := lambda(lst, f)
            if lst != nil {
              f(car(lst)).
              foreach(cdr(lst), f)
            }.

# a tail recursive version of range that is TCO'ed by SBCL
range := lambda(a,b)
           (lambda range% (a, b, acc)
             if a <= b
               then range% (a + 1, b, cons(a, acc))
               else reverse(acc)) (a, b, nil).

# a generator version of range
irange := lambda (a, b)
  let (n = a - 1)
    lambda()
      if n < b then n := n + 1 .

hello := lambda() print("Hello").

